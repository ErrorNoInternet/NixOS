diff --git a/window/src/os/wayland/pointer.rs b/window/src/os/wayland/pointer.rs
index c9458ce3f..ab7f1dac4 100644
--- a/window/src/os/wayland/pointer.rs
+++ b/window/src/os/wayland/pointer.rs
@@ -12,7 +12,7 @@ use toolkit::reexports::client::protocol::wl_data_device::{
 use toolkit::reexports::client::protocol::wl_data_offer::{Event as DataOfferEvent, WlDataOffer};
 use toolkit::reexports::client::protocol::wl_pointer::{Axis, ButtonState, Event as PointerEvent};
 use toolkit::reexports::client::protocol::wl_surface::WlSurface;
-use toolkit::seat::pointer::{ThemeManager, ThemeSpec, ThemedPointer};
+use toolkit::seat::pointer::{ThemeManager, ThemeSpec};
 use wayland_client::protocol::wl_compositor::WlCompositor;
 use wayland_client::protocol::wl_data_device_manager::WlDataDeviceManager;
 use wayland_client::protocol::wl_seat::WlSeat;
@@ -108,7 +108,6 @@ pub struct PointerDispatcher {
     pub(crate) data_device: Main<WlDataDevice>,
     selection_manager: Option<PrimarySelectionDeviceManager>,
     pub(crate) primary_selection_device: Option<PrimarySelectionDevice>,
-    auto_pointer: ThemedPointer,
     #[allow(dead_code)]
     themer: ThemeManager,
     pub(crate) seat: WlSeat,
@@ -275,7 +274,6 @@ impl PointerDispatcher {
         });
 
         let themer = make_theme_manager(compositor, shm);
-        let auto_pointer = themer.theme_pointer(pointer.detach());
 
         let data_device = dev_mgr.get_data_device(seat);
         data_device.quick_assign({
@@ -296,7 +294,6 @@ impl PointerDispatcher {
             selection_manager,
             primary_selection_device,
             themer,
-            auto_pointer,
             seat: seat.clone(),
         })
     }
@@ -335,26 +332,6 @@ impl PointerDispatcher {
             .surface_to_pending
             .insert(surface.as_ref().id(), Arc::clone(pending));
     }
-
-    pub fn set_cursor(&self, names: &[&str], serial: Option<u32>) {
-        if names.is_empty() {
-            (*self.auto_pointer).set_cursor(0, None, 0, 0);
-        } else {
-            let mut errors = vec![];
-            for name in names {
-                match self.auto_pointer.set_cursor(name, serial) {
-                    Ok(_) => return,
-                    Err(err) => errors.push(format!("Unable to set cursor to {name}: {err:#}")),
-                }
-            }
-
-            if let Err(err) = self.auto_pointer.set_cursor("default", serial) {
-                errors.push(format!("Unable to set cursor to 'default': {err:#}"));
-            }
-
-            log::error!("set_cursor: {}", errors.join(", "));
-        }
-    }
 }
 
 fn event_serial(event: &PointerEvent) -> Option<u32> {
diff --git a/window/src/os/wayland/window.rs b/window/src/os/wayland/window.rs
index 64095e7cd..48d23cd6b 100644
--- a/window/src/os/wayland/window.rs
+++ b/window/src/os/wayland/window.rs
@@ -951,12 +951,7 @@ impl WindowOps for WaylandWindow {
         });
     }
 
-    fn set_cursor(&self, cursor: Option<MouseCursor>) {
-        WaylandConnection::with_window_inner(self.0, move |inner| {
-            inner.set_cursor(cursor);
-            Ok(())
-        });
-    }
+    fn set_cursor(&self, _cursor: Option<MouseCursor>) {}
 
     fn invalidate(&self) {
         WaylandConnection::with_window_inner(self.0, |inner| {
@@ -1116,19 +1111,6 @@ impl WaylandWindowInner {
         self.do_paint().unwrap();
     }
 
-    fn set_cursor(&mut self, cursor: Option<MouseCursor>) {
-        let names: &[&str] = match cursor {
-            Some(MouseCursor::Arrow) => &["arrow"],
-            Some(MouseCursor::Hand) => &["hand"],
-            Some(MouseCursor::SizeUpDown) => &["ns-resize"],
-            Some(MouseCursor::SizeLeftRight) => &["ew-resize"],
-            Some(MouseCursor::Text) => &["xterm"],
-            None => &[],
-        };
-        let conn = Connection::get().unwrap().wayland();
-        conn.pointer.borrow().set_cursor(names, None);
-    }
-
     fn invalidate(&mut self) {
         if self.frame_callback.is_some() {
             self.invalidated = true;
