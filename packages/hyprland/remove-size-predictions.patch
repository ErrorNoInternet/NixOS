diff --git a/src/events/Windows.cpp b/src/events/Windows.cpp
index 2da54583..e41816b6 100644
--- a/src/events/Windows.cpp
+++ b/src/events/Windows.cpp
@@ -775,26 +775,7 @@ void Events::listener_commitWindow(void* owner, void* data) {
     CWindow* PWINDOW = (CWindow*)owner;
 
     if (!PWINDOW->m_bIsX11 && PWINDOW->m_uSurface.xdg->initial_commit) {
-        Vector2D predSize = g_pLayoutManager->getCurrentLayout()->predictSizeForNewWindow();
-
-        if (g_pXWaylandManager->shouldBeFloated(PWINDOW, true))
-            predSize = {};
-
-        Vector2D maxSize = Vector2D{PWINDOW->m_uSurface.xdg->toplevel->pending.max_width, PWINDOW->m_uSurface.xdg->toplevel->pending.max_height};
-
-        if ((maxSize.x > 0 && maxSize.x < predSize.x) || (maxSize.y > 0 && maxSize.y < predSize.y))
-            predSize = {};
-
-        for (auto& r : g_pConfigManager->getMatchingRules(PWINDOW, true, true)) {
-            if (r.szRule.starts_with("float")) {
-                predSize = {};
-                break;
-            }
-        }
-
-        Debug::log(LOG, "Layout predicts size {} for {}", predSize, PWINDOW);
-
-        wlr_xdg_toplevel_set_size(PWINDOW->m_uSurface.xdg->toplevel, predSize.x, predSize.y);
+        wlr_xdg_toplevel_set_size(PWINDOW->m_uSurface.xdg->toplevel, 0, 0);
         return;
     }
 
diff --git a/src/layout/DwindleLayout.cpp b/src/layout/DwindleLayout.cpp
index 2f66482a..550af1a7 100644
--- a/src/layout/DwindleLayout.cpp
+++ b/src/layout/DwindleLayout.cpp
@@ -128,13 +128,7 @@ void CHyprDwindleLayout::applyNodeDataToWindow(SDwindleNodeData* pNode, bool for
     const auto PWINDOW = pNode->pWindow;
     // get specific gaps and rules for this workspace,
     // if user specified them in config
-    const auto WORKSPACERULE = g_pConfigManager->getWorkspaceRuleFor(g_pCompositor->getWorkspaceByID(pNode->workspaceID));
-
-    if (!g_pCompositor->windowExists(PWINDOW)) {
-        Debug::log(ERR, "Node {} holding invalid {}!!", pNode, PWINDOW);
-        onWindowRemovedTiling(PWINDOW);
-        return;
-    }
+    const auto WORKSPACERULE = g_pConfigManager->getWorkspaceRuleFor(g_pCompositor->getWorkspaceByID(PWINDOW->m_iWorkspaceID));
 
     if (PWINDOW->m_bIsFullscreen && !pNode->ignoreFullscreenChecks)
         return;
@@ -1116,48 +1110,3 @@ void CHyprDwindleLayout::onEnable() {
 void CHyprDwindleLayout::onDisable() {
     m_lDwindleNodesData.clear();
 }
-
-Vector2D CHyprDwindleLayout::predictSizeForNewWindow() {
-    if (!g_pCompositor->m_pLastMonitor)
-        return {};
-
-    // get window candidate
-    CWindow* candidate = g_pCompositor->m_pLastWindow;
-
-    if (!candidate)
-        candidate = g_pCompositor->getFirstWindowOnWorkspace(g_pCompositor->m_pLastMonitor->activeWorkspace);
-
-    // create a fake node
-    SDwindleNodeData node;
-
-    if (!candidate)
-        return g_pCompositor->m_pLastMonitor->vecSize;
-    else {
-        const auto PNODE = getNodeFromWindow(candidate);
-
-        if (!PNODE)
-            return {};
-
-        node         = *PNODE;
-        node.pWindow = nullptr;
-
-        CBox        box = PNODE->box;
-
-        static auto PFLMULT = CConfigValue<Hyprlang::FLOAT>("dwindle:split_width_multiplier");
-
-        bool        splitTop = box.h * *PFLMULT > box.w;
-
-        const auto  SPLITSIDE = !splitTop;
-
-        if (SPLITSIDE)
-            node.box = {{}, {box.w / 2.0, box.h}};
-        else
-            node.box = {{}, {box.w, box.h / 2.0}};
-
-        // TODO: make this better and more accurate
-
-        return node.box.size();
-    }
-
-    return {};
-}
diff --git a/src/layout/DwindleLayout.hpp b/src/layout/DwindleLayout.hpp
index fc73540a..f5501b28 100644
--- a/src/layout/DwindleLayout.hpp
+++ b/src/layout/DwindleLayout.hpp
@@ -59,7 +59,6 @@ class CHyprDwindleLayout : public IHyprLayout {
     virtual void                     alterSplitRatio(CWindow*, float, bool);
     virtual std::string              getLayoutName();
     virtual void                     replaceWindowDataWith(CWindow* from, CWindow* to);
-    virtual Vector2D                 predictSizeForNewWindow();
 
     virtual void                     onEnable();
     virtual void                     onDisable();
diff --git a/src/layout/IHyprLayout.cpp b/src/layout/IHyprLayout.cpp
index 7269bab7..a3527ebd 100644
--- a/src/layout/IHyprLayout.cpp
+++ b/src/layout/IHyprLayout.cpp
@@ -616,8 +616,4 @@ void IHyprLayout::requestFocusForWindow(CWindow* pWindow) {
     g_pCompositor->warpCursorTo(pWindow->middle());
 }
 
-Vector2D IHyprLayout::predictSizeForNewWindow() {
-    return Vector2D{};
-}
-
 IHyprLayout::~IHyprLayout() {}
diff --git a/src/layout/IHyprLayout.hpp b/src/layout/IHyprLayout.hpp
index d3f8dfa6..bd8767e6 100644
--- a/src/layout/IHyprLayout.hpp
+++ b/src/layout/IHyprLayout.hpp
@@ -181,12 +181,6 @@ class IHyprLayout {
     */
     virtual void requestFocusForWindow(CWindow*);
 
-    /*
-        Called to predict the size of a newly opened window to send it a configure.
-        Return 0,0 if unpredictable
-    */
-    virtual Vector2D predictSizeForNewWindow();
-
   private:
     int         m_iMouseMoveEventCount;
     Vector2D    m_vBeginDragXY;
diff --git a/src/layout/MasterLayout.cpp b/src/layout/MasterLayout.cpp
index d266d816..52fb85a2 100644
--- a/src/layout/MasterLayout.cpp
+++ b/src/layout/MasterLayout.cpp
@@ -1484,33 +1484,6 @@ void CHyprMasterLayout::replaceWindowDataWith(CWindow* from, CWindow* to) {
     applyNodeDataToWindow(PNODE);
 }
 
-Vector2D CHyprMasterLayout::predictSizeForNewWindow() {
-    static auto PNEWISMASTER = CConfigValue<Hyprlang::INT>("master:new_is_master");
-
-    if (!g_pCompositor->m_pLastMonitor)
-        return {};
-
-    const int NODES = getNodesOnWorkspace(g_pCompositor->m_pLastMonitor->activeWorkspace);
-
-    if (NODES <= 0)
-        return g_pCompositor->m_pLastMonitor->vecSize;
-
-    const auto MASTER = getMasterNodeOnWorkspace(g_pCompositor->m_pLastMonitor->activeWorkspace);
-    if (!MASTER) // wtf
-        return {};
-
-    if (*PNEWISMASTER) {
-        return MASTER->size;
-    } else {
-        const auto SLAVES = NODES - getMastersOnWorkspace(g_pCompositor->m_pLastMonitor->activeWorkspace);
-
-        // TODO: make this better
-        return {g_pCompositor->m_pLastMonitor->vecSize.x - MASTER->size.x, g_pCompositor->m_pLastMonitor->vecSize.y / (SLAVES + 1)};
-    }
-
-    return {};
-}
-
 void CHyprMasterLayout::onEnable() {
     for (auto& w : g_pCompositor->m_vWindows) {
         if (w->m_bIsFloating || !w->m_bIsMapped || w->isHidden())
diff --git a/src/layout/MasterLayout.hpp b/src/layout/MasterLayout.hpp
index d48aefdc..e316556a 100644
--- a/src/layout/MasterLayout.hpp
+++ b/src/layout/MasterLayout.hpp
@@ -65,7 +65,6 @@ class CHyprMasterLayout : public IHyprLayout {
     virtual void                     alterSplitRatio(CWindow*, float, bool);
     virtual std::string              getLayoutName();
     virtual void                     replaceWindowDataWith(CWindow* from, CWindow* to);
-    virtual Vector2D                 predictSizeForNewWindow();
 
     virtual void                     onEnable();
     virtual void                     onDisable();
